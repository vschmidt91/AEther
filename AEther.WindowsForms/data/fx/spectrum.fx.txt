//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer RuntimeConstants : register(b0)
{
    float4  Emission;                   // Offset:    0, size:   16
    float4  Scattering;                 // Offset:   16, size:   16
    float4  Absorption;                 // Offset:   32, size:   16
}

cbuffer FrameConstants : register(b1)
{
    float   T;                          // Offset:    0, size:    4
    float   DT;                         // Offset:    4, size:    4
    float   S;                          // Offset:    8, size:    4
    float   DS;                         // Offset:   12, size:    4
    float   HistogramShift;             // Offset:   16, size:    4
    float3  Dummy;                      // Offset:   20, size:   12
}

//
// 13 local object(s)
//
RasterizerState RasterizerDefault
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(BACK /* 3 */);
};
RasterizerState RasterizerBoth
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(NONE /* 1 */);
};
RasterizerState RasterizerBack
{
    FillMode = uint(SOLID /* 3 */);
    CullMode = uint(FRONT /* 2 */);
};
DepthStencilState DepthStencilNone
{
    DepthEnable = bool(FALSE /* 0 */);
    StencilEnable = bool(FALSE /* 0 */);
};
DepthStencilState DepthStencilDefault
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthFunc = uint(LESS /* 2 */);
    DepthWriteMask = uint(ALL /* 1 */);
    StencilEnable = bool(FALSE /* 0 */);
};
DepthStencilState DepthStencilDefaultReadOnly
{
    DepthEnable = bool(TRUE /* 1 */);
    DepthFunc = uint(LESS /* 2 */);
    DepthWriteMask = uint(ZERO /* 0 */);
    StencilEnable = bool(FALSE /* 0 */);
};
BlendState BlendAdditive
{
    SrcBlend[0] = uint(ONE /* 2 */);
    SrcBlend[1] = uint(ONE /* 2 */);
    SrcBlend[2] = uint(ONE /* 2 */);
    SrcBlend[3] = uint(ONE /* 2 */);
    SrcBlend[4] = uint(ONE /* 2 */);
    SrcBlend[5] = uint(ONE /* 2 */);
    SrcBlend[6] = uint(ONE /* 2 */);
    SrcBlend[7] = uint(ONE /* 2 */);
    DestBlend[0] = uint(ONE /* 2 */);
    DestBlend[1] = uint(ONE /* 2 */);
    DestBlend[2] = uint(ONE /* 2 */);
    DestBlend[3] = uint(ONE /* 2 */);
    DestBlend[4] = uint(ONE /* 2 */);
    DestBlend[5] = uint(ONE /* 2 */);
    DestBlend[6] = uint(ONE /* 2 */);
    DestBlend[7] = uint(ONE /* 2 */);
    BlendOp[0] = uint(ADD /* 1 */);
    BlendOp[1] = uint(ADD /* 1 */);
    BlendOp[2] = uint(ADD /* 1 */);
    BlendOp[3] = uint(ADD /* 1 */);
    BlendOp[4] = uint(ADD /* 1 */);
    BlendOp[5] = uint(ADD /* 1 */);
    BlendOp[6] = uint(ADD /* 1 */);
    BlendOp[7] = uint(ADD /* 1 */);
    SrcBlendAlpha[0] = uint(ONE /* 2 */);
    SrcBlendAlpha[1] = uint(ONE /* 2 */);
    SrcBlendAlpha[2] = uint(ONE /* 2 */);
    SrcBlendAlpha[3] = uint(ONE /* 2 */);
    SrcBlendAlpha[4] = uint(ONE /* 2 */);
    SrcBlendAlpha[5] = uint(ONE /* 2 */);
    SrcBlendAlpha[6] = uint(ONE /* 2 */);
    SrcBlendAlpha[7] = uint(ONE /* 2 */);
    DestBlendAlpha[0] = uint(ONE /* 2 */);
    DestBlendAlpha[1] = uint(ONE /* 2 */);
    DestBlendAlpha[2] = uint(ONE /* 2 */);
    DestBlendAlpha[3] = uint(ONE /* 2 */);
    DestBlendAlpha[4] = uint(ONE /* 2 */);
    DestBlendAlpha[5] = uint(ONE /* 2 */);
    DestBlendAlpha[6] = uint(ONE /* 2 */);
    DestBlendAlpha[7] = uint(ONE /* 2 */);
    BlendOpAlpha[0] = uint(ADD /* 1 */);
    BlendOpAlpha[1] = uint(ADD /* 1 */);
    BlendOpAlpha[2] = uint(ADD /* 1 */);
    BlendOpAlpha[3] = uint(ADD /* 1 */);
    BlendOpAlpha[4] = uint(ADD /* 1 */);
    BlendOpAlpha[5] = uint(ADD /* 1 */);
    BlendOpAlpha[6] = uint(ADD /* 1 */);
    BlendOpAlpha[7] = uint(ADD /* 1 */);
    BlendEnable[0] = bool(TRUE /* true */);
    BlendEnable[1] = bool(TRUE /* true */);
    BlendEnable[2] = bool(TRUE /* true */);
    BlendEnable[3] = bool(TRUE /* true */);
    BlendEnable[4] = bool(TRUE /* true */);
    BlendEnable[5] = bool(TRUE /* true */);
    BlendEnable[6] = bool(TRUE /* true */);
    BlendEnable[7] = bool(TRUE /* true */);
};
BlendState BlendNone
{
    BlendEnable[0] = bool(FALSE /* false */);
    BlendEnable[1] = bool(FALSE /* false */);
    BlendEnable[2] = bool(FALSE /* false */);
    BlendEnable[3] = bool(FALSE /* false */);
    BlendEnable[4] = bool(FALSE /* false */);
    BlendEnable[5] = bool(FALSE /* false */);
    BlendEnable[6] = bool(FALSE /* false */);
    BlendEnable[7] = bool(FALSE /* false */);
};
SamplerState Linear
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState Point
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState Anisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
Texture2D Left;
Texture2D Right;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 t0
    {
        pass p0
        {
            RasterizerState = RasterizerDefault;
            DS_StencilRef = uint(0);
            DepthStencilState = DepthStencilNone;
            AB_BlendFactor = float4(0, 0, 0, 0);
            AB_SampleMask = uint(0xffffffff);
            BlendState = BlendNone;
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORDS                0   xy          1     NONE   float   xy  
                //
                //
                // Runtime generated constant mappings:
                //
                // Target Reg                               Constant Description
                // ---------- --------------------------------------------------
                // c0                              Vertex Shader position offset
                //
                //
                // Level9 shader bytecode:
                //
                    vs_2_x
                    def c1, 0.5, 0, 1, 0
                    dcl_texcoord v0  // IN<0,1,2>
                
                #line 25 "C:\Users\Ryzen\Google Drive\Projekte\C#\AEther\AEther.WindowsForms\bin\Debug\netcoreapp3.1\spectrum.fx"
                    mad oT0.xy, v0, c1.x, c1.x  // ::VS<4,5>
                
                #line 19
                    add oPos.xy, v0, c0  // ::VS<0,1>
                    mov oPos.zw, c1.xyyz  // ::VS<2,3>
                
                // approximately 3 instruction slots used
                vs_4_0
                dcl_input v0.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                //
                // Initial variable locations:
                //   v0.x <- IN.Position.x; v0.y <- IN.Position.y; v0.z <- IN.Position.z; 
                //   o1.x <- <VS return value>.UV.x; o1.y <- <VS return value>.UV.y; 
                //   o0.x <- <VS return value>.Position.x; o0.y <- <VS return value>.Position.y; o0.z <- <VS return value>.Position.z; o0.w <- <VS return value>.Position.w
                //
                #line 27 "C:\Users\Ryzen\Google Drive\Projekte\C#\AEther\AEther.WindowsForms\bin\Debug\netcoreapp3.1\spectrum.fx"
                mov o0.xy, v0.xyxx
                mov o0.zw, l(0,0,0,1.000000)
                
                #line 25
                mad o1.xy, v0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
                
                #line 27
                ret 
                // Approximately 4 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 10.1
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim      HLSL Bind  Count
                // ------------------------------ ---------- ------- ----------- -------------- ------
                // Point                             sampler      NA          NA             s0      1 
                // Left                              texture  float4          2d             t0      1 
                // Right                             texture  float4          2d             t1      1 
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORDS                0   xy          1     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                //
                // Sampler/Resource to DX9 shader sampler mappings:
                //
                // Target Sampler Source Sampler  Source Resource
                // -------------- --------------- ----------------
                // s0             s0              t0               
                // s1             s0              t1               
                //
                //
                // Level9 shader bytecode:
                //
                    ps_2_x
                    def c0, 1, 0, 0.5, -0.5
                    def c1, 2, 0, 0, 0
                    dcl t0.xy  // IN<4,5>
                    dcl_2d s0
                    dcl_2d s1
                
                #line 36 "C:\Users\Ryzen\Google Drive\Projekte\C#\AEther\AEther.WindowsForms\bin\Debug\netcoreapp3.1\spectrum.fx"
                    mad r0.xy, t0.y, c0, c0.yzzw
                    texld r1, r0, s1  // ::r<0,1,2,3>
                    texld r0, r0, s0  // ::l<0,1,2,3>
                
                #line 39
                    add r2.w, t0.x, c0.w
                    cmp r0, r2.w, r0, r1  // ::v<0,1,2,3>
                    abs r1.x, r2.w
                    mad r0, r1.x, c1.x, -r0
                    cmp r0, r0, c0.y, c0.x  // ::v<0,1,2,3>
                    mov oC0, r0  // ::PS<0,1,2,3>
                
                // approximately 9 instruction slots used (2 texture, 7 arithmetic)
                ps_4_0
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xy
                dcl_output o0.xyzw
                dcl_temps 3
                //
                // Initial variable locations:
                //   v0.x <- IN.Position.x; v0.y <- IN.Position.y; v0.z <- IN.Position.z; v0.w <- IN.Position.w; 
                //   v1.x <- IN.UV.x; v1.y <- IN.UV.y; 
                //   o0.x <- <PS return value>.x; o0.y <- <PS return value>.y; o0.z <- <PS return value>.z; o0.w <- <PS return value>.w
                //
                #line 39 "C:\Users\Ryzen\Google Drive\Projekte\C#\AEther\AEther.WindowsForms\bin\Debug\netcoreapp3.1\spectrum.fx"
                lt r0.x, v1.x, l(0.500000)
                and r0.x, r0.x, l(0x3f800000)
                
                #line 36
                mov r1.x, v1.y
                mov r1.y, l(0.500000)
                
                #line 37
                sample r2.xyzw, r1.xyxx, t1.xyzw, s0  // r2.x <- r.x; r2.y <- r.y; r2.z <- r.z; r2.w <- r.w
                
                #line 36
                sample r1.xyzw, r1.xyxx, t0.xyzw, s0  // r1.x <- l.x; r1.y <- l.y; r1.z <- l.z; r1.w <- l.w
                
                #line 39
                add r2.xyzw, -r1.xyzw, r2.xyzw
                mad r0.xyzw, r0.xxxx, r2.xyzw, r1.xyzw  // r0.x <- v.x; r0.y <- v.y; r0.z <- v.z; r0.w <- v.w
                
                #line 40
                add r1.x, v1.x, l(-0.500000)
                add r1.x, |r1.x|, |r1.x|
                lt r0.xyzw, r1.xxxx, r0.xyzw
                and o0.xyzw, r0.xyzw, l(0x3f800000, 0x3f800000, 0x3f800000, 0x3f800000)
                
                #line 45
                ret 
                // Approximately 13 instruction slots used
                            
            };
        }

    }

}

